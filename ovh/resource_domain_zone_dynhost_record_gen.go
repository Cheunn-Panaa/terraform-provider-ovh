// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DomainZoneDynhostRecordResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "Record ID",
			MarkdownDescription: "Record ID",
		},
		"ip": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Record IP",
			MarkdownDescription: "Record IP",
		},
		"sub_domain": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Record sub-domain",
			MarkdownDescription: "Record sub-domain",
		},
		"ttl": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "Record TTL (Time to Live)",
			MarkdownDescription: "Record TTL (Time to Live)",
		},
		"zone": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Record zone",
			MarkdownDescription: "Record zone",
		},
		"zone_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Zone name",
			MarkdownDescription: "Zone name",
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type DomainZoneDynhostRecordModel struct {
	Id        ovhtypes.TfInt64Value  `tfsdk:"id" json:"id"`
	Ip        ovhtypes.TfStringValue `tfsdk:"ip" json:"ip"`
	SubDomain ovhtypes.TfStringValue `tfsdk:"sub_domain" json:"subDomain"`
	Ttl       ovhtypes.TfInt64Value  `tfsdk:"ttl" json:"ttl"`
	Zone      ovhtypes.TfStringValue `tfsdk:"zone" json:"zone"`
	ZoneName  ovhtypes.TfStringValue `tfsdk:"zone_name" json:"zoneName"`
}

func (v *DomainZoneDynhostRecordModel) MergeWith(other *DomainZoneDynhostRecordModel) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.SubDomain.IsUnknown() || v.SubDomain.IsNull()) && !other.SubDomain.IsUnknown() {
		v.SubDomain = other.SubDomain
	}

	if (v.Ttl.IsUnknown() || v.Ttl.IsNull()) && !other.Ttl.IsUnknown() {
		v.Ttl = other.Ttl
	}

	if (v.Zone.IsUnknown() || v.Zone.IsNull()) && !other.Zone.IsUnknown() {
		v.Zone = other.Zone
	}

	if (v.ZoneName.IsUnknown() || v.ZoneName.IsNull()) && !other.ZoneName.IsUnknown() {
		v.ZoneName = other.ZoneName
	}

}

func (v DomainZoneDynhostRecordModel) ToCreate() *DomainZoneDynhostRecordModel {
	res := &DomainZoneDynhostRecordModel{}

	if !v.Ip.IsUnknown() {
		res.Ip = v.Ip
	}

	if !v.SubDomain.IsUnknown() {
		res.SubDomain = v.SubDomain
	}

	return res
}

func (v DomainZoneDynhostRecordModel) ToUpdate() *DomainZoneDynhostRecordModel {
	res := &DomainZoneDynhostRecordModel{}

	if !v.Ip.IsUnknown() {
		res.Ip = v.Ip
	}

	if !v.SubDomain.IsUnknown() {
		res.SubDomain = v.SubDomain
	}

	return res
}

func (v *DomainZoneDynhostRecordModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.Ip.IsNull() && !v.Ip.IsUnknown() {
		toMarshal["ip"] = v.Ip
	}
	if !v.SubDomain.IsNull() && !v.SubDomain.IsUnknown() {
		toMarshal["subDomain"] = v.SubDomain
	}

	return json.Marshal(toMarshal)
}
