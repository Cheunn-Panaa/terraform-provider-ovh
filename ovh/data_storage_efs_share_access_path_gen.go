// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"

	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StorageEfsShareAccessPathDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Access path ID",
			MarkdownDescription: "Access path ID",
		},
		"path": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Access path",
			MarkdownDescription: "Access path",
		},
		"preferred": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "Is this the preferred access path?",
			MarkdownDescription: "Is this the preferred access path?",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"share_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Share ID",
			MarkdownDescription: "Share ID",
		},
	}

	return schema.Schema{
		Description: "Get access path details",
		Attributes:  attrs,
	}
}

type StorageEfsShareAccessPathModel struct {
	Id          ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Path        ovhtypes.TfStringValue `tfsdk:"path" json:"path"`
	Preferred   ovhtypes.TfBoolValue   `tfsdk:"preferred" json:"preferred"`
	ServiceName ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	ShareId     ovhtypes.TfStringValue `tfsdk:"share_id" json:"shareId"`
}

func (v *StorageEfsShareAccessPathModel) MergeWith(other *StorageEfsShareAccessPathModel) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Path.IsUnknown() || v.Path.IsNull()) && !other.Path.IsUnknown() {
		v.Path = other.Path
	}

	if (v.Preferred.IsUnknown() || v.Preferred.IsNull()) && !other.Preferred.IsUnknown() {
		v.Preferred = other.Preferred
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.ShareId.IsUnknown() || v.ShareId.IsNull()) && !other.ShareId.IsUnknown() {
		v.ShareId = other.ShareId
	}

}
