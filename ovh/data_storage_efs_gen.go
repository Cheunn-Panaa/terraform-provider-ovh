// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StorageEfsDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"created_at": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service creation date",
			MarkdownDescription: "Service creation date",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service ID",
			MarkdownDescription: "Service ID",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"performance_level": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service performance level",
			MarkdownDescription: "Service performance level",
		},
		"product": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Product name",
			MarkdownDescription: "Product name",
		},
		"quota": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "Service quota",
			MarkdownDescription: "Service quota",
		},
		"region": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service region",
			MarkdownDescription: "Service region",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service status",
			MarkdownDescription: "Service status",
		},
	}

	return schema.Schema{
		Description: "Get service details",
		Attributes:  attrs,
	}
}

type StorageEfsModel struct {
	CreatedAt        ovhtypes.TfStringValue `tfsdk:"created_at" json:"createdAt"`
	Iam              IamValue               `tfsdk:"iam" json:"iam"`
	Id               ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Name             ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	PerformanceLevel ovhtypes.TfStringValue `tfsdk:"performance_level" json:"performanceLevel"`
	Product          ovhtypes.TfStringValue `tfsdk:"product" json:"product"`
	Quota            ovhtypes.TfInt64Value  `tfsdk:"quota" json:"quota"`
	Region           ovhtypes.TfStringValue `tfsdk:"region" json:"region"`
	ServiceName      ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	Status           ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
}

func (v *StorageEfsModel) MergeWith(other *StorageEfsModel) {

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.Iam.IsUnknown() || v.Iam.IsNull()) && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.PerformanceLevel.IsUnknown() || v.PerformanceLevel.IsNull()) && !other.PerformanceLevel.IsUnknown() {
		v.PerformanceLevel = other.PerformanceLevel
	}

	if (v.Product.IsUnknown() || v.Product.IsNull()) && !other.Product.IsUnknown() {
		v.Product = other.Product
	}

	if (v.Quota.IsUnknown() || v.Quota.IsNull()) && !other.Quota.IsUnknown() {
		v.Quota = other.Quota
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

}
