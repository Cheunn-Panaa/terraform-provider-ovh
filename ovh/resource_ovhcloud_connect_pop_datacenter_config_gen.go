// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OvhcloudConnectPopDatacenterConfigResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"config_pop_id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Required:            true,
			Description:         "ID of the pop configuration",
			MarkdownDescription: "ID of the pop configuration",
		},
		"datacenter_id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Required:            true,
			Description:         "ID of the datacenter linked",
			MarkdownDescription: "ID of the datacenter linked",
		},
		"id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "ID of the Datacenter configuration",
			MarkdownDescription: "ID of the Datacenter configuration",
		},
		"ovh_bgp_area": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Optional:            true,
			Computed:            true,
			Description:         "OVH Private AS",
			MarkdownDescription: "OVH Private AS",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Status of the pop configuration",
			MarkdownDescription: "Status of the pop configuration",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"active",
					"init",
					"toDelete",
				),
			},
		},
		"subnet": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Subnet should be a /28 min",
			MarkdownDescription: "Subnet should be a /28 min",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OvhcloudConnectPopDatacenterConfigModel struct {
	ConfigPopId  ovhtypes.TfInt64Value  `tfsdk:"config_pop_id" json:"popId"`
	DatacenterId ovhtypes.TfInt64Value  `tfsdk:"datacenter_id" json:"datacenterId"`
	Id           ovhtypes.TfInt64Value  `tfsdk:"id" json:"id"`
	OvhBgpArea   ovhtypes.TfInt64Value  `tfsdk:"ovh_bgp_area" json:"ovhBgpArea"`
	ServiceName  ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	Status       ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
	Subnet       ovhtypes.TfStringValue `tfsdk:"subnet" json:"subnet"`
}

func (v *OvhcloudConnectPopDatacenterConfigModel) MergeWith(other *OvhcloudConnectPopDatacenterConfigModel) {

	if (v.ConfigPopId.IsUnknown() || v.ConfigPopId.IsNull()) && !other.ConfigPopId.IsUnknown() {
		v.ConfigPopId = other.ConfigPopId
	}

	if (v.DatacenterId.IsUnknown() || v.DatacenterId.IsNull()) && !other.DatacenterId.IsUnknown() {
		v.DatacenterId = other.DatacenterId
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.OvhBgpArea.IsUnknown() || v.OvhBgpArea.IsNull()) && !other.OvhBgpArea.IsUnknown() {
		v.OvhBgpArea = other.OvhBgpArea
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.Subnet.IsUnknown() || v.Subnet.IsNull()) && !other.Subnet.IsUnknown() {
		v.Subnet = other.Subnet
	}

}

func (v OvhcloudConnectPopDatacenterConfigModel) ToCreate() *OvhcloudConnectPopDatacenterConfigModel {
	res := &OvhcloudConnectPopDatacenterConfigModel{}

	if !v.DatacenterId.IsUnknown() {
		res.DatacenterId = v.DatacenterId
	}

	if !v.OvhBgpArea.IsUnknown() {
		res.OvhBgpArea = v.OvhBgpArea
	}

	if !v.Subnet.IsUnknown() {
		res.Subnet = v.Subnet
	}

	return res
}

func (v OvhcloudConnectPopDatacenterConfigModel) ToUpdate() *OvhcloudConnectPopDatacenterConfigModel {
	res := &OvhcloudConnectPopDatacenterConfigModel{}

	if !v.DatacenterId.IsUnknown() {
		res.DatacenterId = v.DatacenterId
	}

	if !v.OvhBgpArea.IsUnknown() {
		res.OvhBgpArea = v.OvhBgpArea
	}

	if !v.Subnet.IsUnknown() {
		res.Subnet = v.Subnet
	}

	return res
}

func (v *OvhcloudConnectPopDatacenterConfigModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.DatacenterId.IsNull() && !v.DatacenterId.IsUnknown() {
		toMarshal["datacenterId"] = v.DatacenterId
	}
	if !v.OvhBgpArea.IsNull() && !v.OvhBgpArea.IsUnknown() {
		toMarshal["ovhBgpArea"] = v.OvhBgpArea
	}
	if !v.Subnet.IsNull() && !v.Subnet.IsUnknown() {
		toMarshal["subnet"] = v.Subnet
	}

	return json.Marshal(toMarshal)
}
