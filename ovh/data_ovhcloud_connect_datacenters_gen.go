// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OvhcloudConnectDatacentersDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"datacenters": schema.SetNestedAttribute{
			Computed: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"available": schema.BoolAttribute{
						CustomType:          ovhtypes.TfBoolType{},
						Computed:            true,
						Description:         "Get availability to add new configuration on it",
						MarkdownDescription: "Get availability to add new configuration on it",
					},
					"id": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Required:            true,
						Description:         "Id",
						MarkdownDescription: "Id",
					},
					"name": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "name of the datacenter",
						MarkdownDescription: "name of the datacenter",
					},
					"region": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "region of the datacenter",
						MarkdownDescription: "region of the datacenter",
					},
					"region_type": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "region type of the datacenter",
						MarkdownDescription: "region type of the datacenter",
					},
				},
			},
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OvhcloudConnectDatacentersModel struct {
	Datacenters []OvhcloudConnectDatacenterModel `tfsdk:"datacenters"`
	ServiceName ovhtypes.TfStringValue           `tfsdk:"service_name" json:"serviceName"`
}

type OvhcloudConnectDatacenterModel struct {
	Available  ovhtypes.TfBoolValue   `tfsdk:"available" json:"available"`
	Id         ovhtypes.TfInt64Value  `tfsdk:"id" json:"id"`
	Name       ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	Region     ovhtypes.TfStringValue `tfsdk:"region" json:"region"`
	RegionType ovhtypes.TfStringValue `tfsdk:"region_type" json:"regionType"`
}

func (v *OvhcloudConnectDatacenterModel) MergeWith(other *OvhcloudConnectDatacenterModel) {

	if (v.Available.IsUnknown() || v.Available.IsNull()) && !other.Available.IsUnknown() {
		v.Available = other.Available
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.RegionType.IsUnknown() || v.RegionType.IsNull()) && !other.RegionType.IsUnknown() {
		v.RegionType = other.RegionType
	}

}
