// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OvhcloudConnectConfigPopDatacentersDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"config_pop_id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Required:            true,
			Description:         "ID of the Pop Configuration",
			MarkdownDescription: "ID of the Pop Configuration",
		},
		"datacenter_configs": schema.SetNestedAttribute{
			Computed: true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"datacenter_id": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Required:            true,
						Description:         "Datacenter ID",
						MarkdownDescription: "Datacenter ID",
					},
					"id": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "ID of the Datacenter configuration",
						MarkdownDescription: "ID of the Datacenter configuration",
					},
					"ovh_bgp_area": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "OVH Private AS",
						MarkdownDescription: "OVH Private AS",
					},
					"status": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Status of the pop configuration",
						MarkdownDescription: "Status of the pop configuration",
					},
					"subnet": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Subnet should be a /28 min",
						MarkdownDescription: "Subnet should be a /28 min",
					},
				},
			},
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OvhcloudConnectConfigPopDatacentersModel struct {
	DatacenterConfigs []OvhcloudConnectConfigPopDatacenterModel `tfsdk:"datacenter_configs"`
	ConfigPopId       ovhtypes.TfInt64Value                     `tfsdk:"config_pop_id" json:"popId"`
	ServiceName       ovhtypes.TfStringValue                    `tfsdk:"service_name" json:"serviceName"`
}

type OvhcloudConnectConfigPopDatacenterModel struct {
	DatacenterId ovhtypes.TfInt64Value  `tfsdk:"datacenter_id" json:"datacenterId"`
	Id           ovhtypes.TfInt64Value  `tfsdk:"id" json:"id"`
	OvhBgpArea   ovhtypes.TfInt64Value  `tfsdk:"ovh_bgp_area" json:"ovhBgpArea"`
	Status       ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
	Subnet       ovhtypes.TfStringValue `tfsdk:"subnet" json:"subnet"`
}

func (v *OvhcloudConnectConfigPopDatacenterModel) MergeWith(other *OvhcloudConnectConfigPopDatacenterModel) {

	if (v.DatacenterId.IsUnknown() || v.DatacenterId.IsNull()) && !other.DatacenterId.IsUnknown() {
		v.DatacenterId = other.DatacenterId
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.OvhBgpArea.IsUnknown() || v.OvhBgpArea.IsNull()) && !other.OvhBgpArea.IsUnknown() {
		v.OvhBgpArea = other.OvhBgpArea
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.Subnet.IsUnknown() || v.Subnet.IsNull()) && !other.Subnet.IsUnknown() {
		v.Subnet = other.Subnet
	}

}
