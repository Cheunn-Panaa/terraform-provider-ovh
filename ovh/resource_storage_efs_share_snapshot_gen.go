// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func StorageEfsShareSnapshotResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"created_at": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Snapshot creation date",
			MarkdownDescription: "Snapshot creation date",
		},
		"description": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Snapshot description",
			MarkdownDescription: "Snapshot description",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Snapshot ID",
			MarkdownDescription: "Snapshot ID",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Snapshot name",
			MarkdownDescription: "Snapshot name",
		},
		"path": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Snapshot path",
			MarkdownDescription: "Snapshot path",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"share_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Share ID",
			MarkdownDescription: "Share ID",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Snapshot status",
			MarkdownDescription: "Snapshot status",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"available",
					"creating",
					"deleting",
					"error",
					"error_deleting",
					"manage_error",
					"manage_starting",
					"restoring",
					"unmanage_error",
					"unmanage_starting",
				),
			},
		},
		"type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Snapshot type",
			MarkdownDescription: "Snapshot type",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"automatic",
					"manual",
					"system",
				),
			},
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type StorageEfsShareSnapshotModel struct {
	CreatedAt   ovhtypes.TfStringValue `tfsdk:"created_at" json:"createdAt"`
	Description ovhtypes.TfStringValue `tfsdk:"description" json:"description"`
	Id          ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Name        ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	Path        ovhtypes.TfStringValue `tfsdk:"path" json:"path"`
	ServiceName ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	ShareId     ovhtypes.TfStringValue `tfsdk:"share_id" json:"shareId"`
	Status      ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
	Type        ovhtypes.TfStringValue `tfsdk:"type" json:"type"`
}

func (v *StorageEfsShareSnapshotModel) MergeWith(other *StorageEfsShareSnapshotModel) {

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Path.IsUnknown() || v.Path.IsNull()) && !other.Path.IsUnknown() {
		v.Path = other.Path
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.ShareId.IsUnknown() || v.ShareId.IsNull()) && !other.ShareId.IsUnknown() {
		v.ShareId = other.ShareId
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.Type.IsUnknown() || v.Type.IsNull()) && !other.Type.IsUnknown() {
		v.Type = other.Type
	}

}

func (v StorageEfsShareSnapshotModel) ToCreate() *StorageEfsShareSnapshotModel {
	res := &StorageEfsShareSnapshotModel{}

	if !v.Description.IsUnknown() {
		res.Description = v.Description
	}

	if !v.Name.IsUnknown() {
		res.Name = v.Name
	}

	return res
}

func (v StorageEfsShareSnapshotModel) ToUpdate() *StorageEfsShareSnapshotModel {
	res := &StorageEfsShareSnapshotModel{}

	if !v.Description.IsUnknown() {
		res.Description = v.Description
	}

	if !v.Name.IsUnknown() {
		res.Name = v.Name
	}

	return res
}

func (v *StorageEfsShareSnapshotModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.Description.IsNull() && !v.Description.IsUnknown() {
		toMarshal["description"] = v.Description
	}
	if !v.Name.IsNull() && !v.Name.IsUnknown() {
		toMarshal["name"] = v.Name
	}

	return json.Marshal(toMarshal)
}
