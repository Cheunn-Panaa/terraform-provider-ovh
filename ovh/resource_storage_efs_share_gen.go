// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
)

func StorageEfsShareResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"created_at": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Share creation date",
			MarkdownDescription: "Share creation date",
		},
		"description": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Share description",
			MarkdownDescription: "Share description",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Share ID",
			MarkdownDescription: "Share ID",
		},
		"mount_point_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "User-defined name used to generate human readable access path for the share",
			MarkdownDescription: "User-defined name used to generate human readable access path for the share",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Share name",
			MarkdownDescription: "Share name",
		},
		"protocol": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Share protocol",
			MarkdownDescription: "Share protocol",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"NFS",
				),
			},
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"size": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Required:            true,
			Description:         "Share size in Gigabytes",
			MarkdownDescription: "Share size in Gigabytes",
		},
		"snapshot_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Snapshot ID used to create the share",
			MarkdownDescription: "Snapshot ID used to create the share",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Share status",
			MarkdownDescription: "Share status",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"available",
					"creating",
					"creating_from_snapshot",
					"deleted",
					"deleting",
					"error",
					"error_deleting",
					"extending",
					"extending_error",
					"inactive",
					"manage_error",
					"manage_starting",
					"migrating",
					"migrating_to",
					"replication_change",
					"reverting",
					"reverting_error",
					"shrinking",
					"shrinking_error",
					"shrinking_possible_data_loss_error",
					"unmanage_error",
					"unmanage_starting",
					"unmanaged",
				),
			},
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type StorageEfsShareModel struct {
	CreatedAt      ovhtypes.TfStringValue `tfsdk:"created_at" json:"createdAt"`
	Description    ovhtypes.TfStringValue `tfsdk:"description" json:"description"`
	Id             ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	MountPointName ovhtypes.TfStringValue `tfsdk:"mount_point_name" json:"mountPointName"`
	Name           ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	Protocol       ovhtypes.TfStringValue `tfsdk:"protocol" json:"protocol"`
	ServiceName    ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	Size           ovhtypes.TfInt64Value  `tfsdk:"size" json:"size"`
	SnapshotId     ovhtypes.TfStringValue `tfsdk:"snapshot_id" json:"snapshotID"`
	Status         ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
}

func (v *StorageEfsShareModel) MergeWith(other *StorageEfsShareModel) {

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.MountPointName.IsUnknown() || v.MountPointName.IsNull()) && !other.MountPointName.IsUnknown() {
		v.MountPointName = other.MountPointName
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Protocol.IsUnknown() || v.Protocol.IsNull()) && !other.Protocol.IsUnknown() {
		v.Protocol = other.Protocol
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Size.IsUnknown() || v.Size.IsNull()) && !other.Size.IsUnknown() {
		v.Size = other.Size
	}

	if (v.SnapshotId.IsUnknown() || v.SnapshotId.IsNull()) && !other.SnapshotId.IsUnknown() {
		v.SnapshotId = other.SnapshotId
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

}

func (v StorageEfsShareModel) ToCreate() *StorageEfsShareModel {
	res := &StorageEfsShareModel{}

	if !v.Description.IsUnknown() {
		res.Description = v.Description
	}

	if !v.MountPointName.IsUnknown() {
		res.MountPointName = v.MountPointName
	}

	if !v.Name.IsUnknown() {
		res.Name = v.Name
	}

	if !v.Protocol.IsUnknown() {
		res.Protocol = v.Protocol
	}

	if !v.Size.IsUnknown() {
		res.Size = v.Size
	}

	if !v.SnapshotId.IsUnknown() {
		res.SnapshotId = v.SnapshotId
	}

	return res
}

func (v StorageEfsShareModel) ToUpdate() *StorageEfsShareModel {
	res := &StorageEfsShareModel{}

	if !v.Description.IsUnknown() {
		res.Description = v.Description
	}

	if !v.Name.IsUnknown() {
		res.Name = v.Name
	}

	return res
}

func (v *StorageEfsShareModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.Description.IsNull() && !v.Description.IsUnknown() {
		toMarshal["description"] = v.Description
	}
	if !v.MountPointName.IsNull() && !v.MountPointName.IsUnknown() {
		toMarshal["mountPointName"] = v.MountPointName
	}
	if !v.Name.IsNull() && !v.Name.IsUnknown() {
		toMarshal["name"] = v.Name
	}
	if !v.Protocol.IsNull() && !v.Protocol.IsUnknown() {
		toMarshal["protocol"] = v.Protocol
	}
	if !v.Size.IsNull() && !v.Size.IsUnknown() {
		toMarshal["size"] = v.Size
	}
	if !v.SnapshotId.IsNull() && !v.SnapshotId.IsUnknown() {
		toMarshal["snapshotID"] = v.SnapshotId
	}

	return json.Marshal(toMarshal)
}
