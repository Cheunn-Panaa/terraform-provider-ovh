// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudProjectSshKeysDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"ssh_keys": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "SSH key id",
						MarkdownDescription: "SSH key id",
					},
					"name": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "SSH key name",
						MarkdownDescription: "SSH key name",
					},
					"public_key": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "SSH public key",
						MarkdownDescription: "SSH public key",
					},
					"regions": schema.ListAttribute{
						CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
						Computed:            true,
						Description:         "SSH key regions",
						MarkdownDescription: "SSH key regions",
					},
				},
				CustomType: CloudProjectSshKeysType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudProjectSshKeysValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[CloudProjectSshKeysValue](ctx),
			Computed:   true,
		},
		"region": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Region",
			MarkdownDescription: "Region",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
	}

	return schema.Schema{
		Description: "Get SSH keys",
		Attributes:  attrs,
	}
}

type CloudProjectSshKeysModel struct {
	SshKeys     ovhtypes.TfListNestedValue[CloudProjectSshKeysValue] `tfsdk:"ssh_keys" json:"sshKeys"`
	Region      ovhtypes.TfStringValue                               `tfsdk:"region" json:"region"`
	ServiceName ovhtypes.TfStringValue                               `tfsdk:"service_name" json:"serviceName"`
}

func (v *CloudProjectSshKeysModel) MergeWith(other *CloudProjectSshKeysModel) {

	if (v.SshKeys.IsUnknown() || v.SshKeys.IsNull()) && !other.SshKeys.IsUnknown() {
		v.SshKeys = other.SshKeys
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

}

var _ basetypes.ObjectTypable = CloudProjectSshKeysType{}

type CloudProjectSshKeysType struct {
	basetypes.ObjectType
}

func (t CloudProjectSshKeysType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectSshKeysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectSshKeysType) String() string {
	return "CloudProjectSshKeysType"
}

func (t CloudProjectSshKeysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	publicKeyAttribute, ok := attributes["public_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_key is missing from object`)

		return nil, diags
	}

	publicKeyVal, ok := publicKeyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_key expected to be ovhtypes.TfStringValue, was: %T`, publicKeyAttribute))
	}

	regionsAttribute, ok := attributes["regions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regions is missing from object`)

		return nil, diags
	}

	regionsVal, ok := regionsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regions expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, regionsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectSshKeysValue{
		Id:        idVal,
		Name:      nameVal,
		PublicKey: publicKeyVal,
		Regions:   regionsVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectSshKeysValueNull() CloudProjectSshKeysValue {
	return CloudProjectSshKeysValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectSshKeysValueUnknown() CloudProjectSshKeysValue {
	return CloudProjectSshKeysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectSshKeysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectSshKeysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectSshKeysValue Attribute Value",
				"While creating a CloudProjectSshKeysValue value, a missing attribute value was detected. "+
					"A CloudProjectSshKeysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectSshKeysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectSshKeysValue Attribute Type",
				"While creating a CloudProjectSshKeysValue value, an invalid attribute value was detected. "+
					"A CloudProjectSshKeysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectSshKeysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectSshKeysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectSshKeysValue Attribute Value",
				"While creating a CloudProjectSshKeysValue value, an extra attribute value was detected. "+
					"A CloudProjectSshKeysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectSshKeysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	publicKeyAttribute, ok := attributes["public_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_key is missing from object`)

		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	publicKeyVal, ok := publicKeyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_key expected to be ovhtypes.TfStringValue, was: %T`, publicKeyAttribute))
	}

	regionsAttribute, ok := attributes["regions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regions is missing from object`)

		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	regionsVal, ok := regionsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regions expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, regionsAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectSshKeysValueUnknown(), diags
	}

	return CloudProjectSshKeysValue{
		Id:        idVal,
		Name:      nameVal,
		PublicKey: publicKeyVal,
		Regions:   regionsVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectSshKeysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectSshKeysValue {
	object, diags := NewCloudProjectSshKeysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectSshKeysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectSshKeysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectSshKeysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectSshKeysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectSshKeysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectSshKeysValueMust(CloudProjectSshKeysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectSshKeysType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectSshKeysValue{}
}

var _ basetypes.ObjectValuable = CloudProjectSshKeysValue{}

type CloudProjectSshKeysValue struct {
	Id        ovhtypes.TfStringValue                             `tfsdk:"id" json:"id"`
	Name      ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	PublicKey ovhtypes.TfStringValue                             `tfsdk:"public_key" json:"publicKey"`
	Regions   ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"regions" json:"regions"`
	state     attr.ValueState
}

func (v *CloudProjectSshKeysValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectSshKeysValue CloudProjectSshKeysValue

	var tmp JsonCloudProjectSshKeysValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Id = tmp.Id
	v.Name = tmp.Name
	v.PublicKey = tmp.PublicKey
	v.Regions = tmp.Regions

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectSshKeysValue) MergeWith(other *CloudProjectSshKeysValue) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.PublicKey.IsUnknown() || v.PublicKey.IsNull()) && !other.PublicKey.IsUnknown() {
		v.PublicKey = other.PublicKey
	}

	if (v.Regions.IsUnknown() || v.Regions.IsNull()) && !other.Regions.IsUnknown() {
		v.Regions = other.Regions
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectSshKeysValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"id":        v.Id,
		"name":      v.Name,
		"publicKey": v.PublicKey,
		"regions":   v.Regions,
	}
}
func (v CloudProjectSshKeysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["regions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PublicKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_key"] = val

		val, err = v.Regions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["regions"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectSshKeysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectSshKeysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectSshKeysValue) String() string {
	return "CloudProjectSshKeysValue"
}

func (v CloudProjectSshKeysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"id":         ovhtypes.TfStringType{},
			"name":       ovhtypes.TfStringType{},
			"public_key": ovhtypes.TfStringType{},
			"regions":    ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
		},
		map[string]attr.Value{
			"id":         v.Id,
			"name":       v.Name,
			"public_key": v.PublicKey,
			"regions":    v.Regions,
		})

	return objVal, diags
}

func (v CloudProjectSshKeysValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectSshKeysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PublicKey.Equal(other.PublicKey) {
		return false
	}

	if !v.Regions.Equal(other.Regions) {
		return false
	}

	return true
}

func (v CloudProjectSshKeysValue) Type(ctx context.Context) attr.Type {
	return CloudProjectSshKeysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectSshKeysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":         ovhtypes.TfStringType{},
		"name":       ovhtypes.TfStringType{},
		"public_key": ovhtypes.TfStringType{},
		"regions":    ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
	}
}
