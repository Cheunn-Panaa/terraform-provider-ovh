// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StorageEfsShareAccessPathsDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"share_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Share ID",
			MarkdownDescription: "Share ID",
		},
		"access_paths": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Access path ID",
						MarkdownDescription: "Access path ID",
					},
					"path": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Access path",
						MarkdownDescription: "Access path",
					},
					"preferred": schema.BoolAttribute{
						CustomType:          ovhtypes.TfBoolType{},
						Computed:            true,
						Description:         "Is this the preferred access path?",
						MarkdownDescription: "Is this the preferred access path?",
					},
				},
				CustomType: StorageEfsShareAccessPathsType{
					ObjectType: types.ObjectType{
						AttrTypes: StorageEfsShareAccessPathsValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[StorageEfsShareAccessPathsValue](ctx),
			Computed:   true,
		},
	}

	return schema.Schema{
		Description: "List available access paths",
		Attributes:  attrs,
	}
}

type StorageEfsShareAccessPathsModel struct {
	ServiceName ovhtypes.TfStringValue                                      `tfsdk:"service_name" json:"serviceName"`
	ShareId     ovhtypes.TfStringValue                                      `tfsdk:"share_id" json:"shareId"`
	AccessPaths ovhtypes.TfListNestedValue[StorageEfsShareAccessPathsValue] `tfsdk:"access_paths" json:"accessPaths"`
}

func (v *StorageEfsShareAccessPathsModel) MergeWith(other *StorageEfsShareAccessPathsModel) {

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.ShareId.IsUnknown() || v.ShareId.IsNull()) && !other.ShareId.IsUnknown() {
		v.ShareId = other.ShareId
	}

	if (v.AccessPaths.IsUnknown() || v.AccessPaths.IsNull()) && !other.AccessPaths.IsUnknown() {
		v.AccessPaths = other.AccessPaths
	}

}

var _ basetypes.ObjectTypable = StorageEfsShareAccessPathsType{}

type StorageEfsShareAccessPathsType struct {
	basetypes.ObjectType
}

func (t StorageEfsShareAccessPathsType) Equal(o attr.Type) bool {
	other, ok := o.(StorageEfsShareAccessPathsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StorageEfsShareAccessPathsType) String() string {
	return "StorageEfsShareAccessPathsType"
}

func (t StorageEfsShareAccessPathsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be ovhtypes.TfStringValue, was: %T`, pathAttribute))
	}

	preferredAttribute, ok := attributes["preferred"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`preferred is missing from object`)

		return nil, diags
	}

	preferredVal, ok := preferredAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`preferred expected to be ovhtypes.TfBoolValue, was: %T`, preferredAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StorageEfsShareAccessPathsValue{
		Id:        idVal,
		Path:      pathVal,
		Preferred: preferredVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewStorageEfsShareAccessPathsValueNull() StorageEfsShareAccessPathsValue {
	return StorageEfsShareAccessPathsValue{
		state: attr.ValueStateNull,
	}
}

func NewStorageEfsShareAccessPathsValueUnknown() StorageEfsShareAccessPathsValue {
	return StorageEfsShareAccessPathsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStorageEfsShareAccessPathsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StorageEfsShareAccessPathsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StorageEfsShareAccessPathsValue Attribute Value",
				"While creating a StorageEfsShareAccessPathsValue value, a missing attribute value was detected. "+
					"A StorageEfsShareAccessPathsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StorageEfsShareAccessPathsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StorageEfsShareAccessPathsValue Attribute Type",
				"While creating a StorageEfsShareAccessPathsValue value, an invalid attribute value was detected. "+
					"A StorageEfsShareAccessPathsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StorageEfsShareAccessPathsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StorageEfsShareAccessPathsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StorageEfsShareAccessPathsValue Attribute Value",
				"While creating a StorageEfsShareAccessPathsValue value, an extra attribute value was detected. "+
					"A StorageEfsShareAccessPathsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StorageEfsShareAccessPathsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStorageEfsShareAccessPathsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewStorageEfsShareAccessPathsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewStorageEfsShareAccessPathsValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be ovhtypes.TfStringValue, was: %T`, pathAttribute))
	}

	preferredAttribute, ok := attributes["preferred"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`preferred is missing from object`)

		return NewStorageEfsShareAccessPathsValueUnknown(), diags
	}

	preferredVal, ok := preferredAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`preferred expected to be ovhtypes.TfBoolValue, was: %T`, preferredAttribute))
	}

	if diags.HasError() {
		return NewStorageEfsShareAccessPathsValueUnknown(), diags
	}

	return StorageEfsShareAccessPathsValue{
		Id:        idVal,
		Path:      pathVal,
		Preferred: preferredVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewStorageEfsShareAccessPathsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StorageEfsShareAccessPathsValue {
	object, diags := NewStorageEfsShareAccessPathsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStorageEfsShareAccessPathsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StorageEfsShareAccessPathsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStorageEfsShareAccessPathsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStorageEfsShareAccessPathsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStorageEfsShareAccessPathsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStorageEfsShareAccessPathsValueMust(StorageEfsShareAccessPathsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StorageEfsShareAccessPathsType) ValueType(ctx context.Context) attr.Value {
	return StorageEfsShareAccessPathsValue{}
}

var _ basetypes.ObjectValuable = StorageEfsShareAccessPathsValue{}

type StorageEfsShareAccessPathsValue struct {
	Id        ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Path      ovhtypes.TfStringValue `tfsdk:"path" json:"path"`
	Preferred ovhtypes.TfBoolValue   `tfsdk:"preferred" json:"preferred"`
	state     attr.ValueState
}

func (v *StorageEfsShareAccessPathsValue) UnmarshalJSON(data []byte) error {
	type JsonStorageEfsShareAccessPathsValue StorageEfsShareAccessPathsValue

	var tmp JsonStorageEfsShareAccessPathsValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Id = tmp.Id
	v.Path = tmp.Path
	v.Preferred = tmp.Preferred

	v.state = attr.ValueStateKnown

	return nil
}

func (v *StorageEfsShareAccessPathsValue) MergeWith(other *StorageEfsShareAccessPathsValue) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Path.IsUnknown() || v.Path.IsNull()) && !other.Path.IsUnknown() {
		v.Path = other.Path
	}

	if (v.Preferred.IsUnknown() || v.Preferred.IsNull()) && !other.Preferred.IsUnknown() {
		v.Preferred = other.Preferred
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v StorageEfsShareAccessPathsValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"id":        v.Id,
		"path":      v.Path,
		"preferred": v.Preferred,
	}
}
func (v StorageEfsShareAccessPathsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["preferred"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		val, err = v.Preferred.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["preferred"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StorageEfsShareAccessPathsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StorageEfsShareAccessPathsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StorageEfsShareAccessPathsValue) String() string {
	return "StorageEfsShareAccessPathsValue"
}

func (v StorageEfsShareAccessPathsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"id":        ovhtypes.TfStringType{},
			"path":      ovhtypes.TfStringType{},
			"preferred": ovhtypes.TfBoolType{},
		},
		map[string]attr.Value{
			"id":        v.Id,
			"path":      v.Path,
			"preferred": v.Preferred,
		})

	return objVal, diags
}

func (v StorageEfsShareAccessPathsValue) Equal(o attr.Value) bool {
	other, ok := o.(StorageEfsShareAccessPathsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	if !v.Preferred.Equal(other.Preferred) {
		return false
	}

	return true
}

func (v StorageEfsShareAccessPathsValue) Type(ctx context.Context) attr.Type {
	return StorageEfsShareAccessPathsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StorageEfsShareAccessPathsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":        ovhtypes.TfStringType{},
		"path":      ovhtypes.TfStringType{},
		"preferred": ovhtypes.TfBoolType{},
	}
}
