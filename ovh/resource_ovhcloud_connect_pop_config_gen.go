// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OvhcloudConnectPopConfigResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"customer_bgp_area": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Optional:            true,
			Computed:            true,
			Description:         "Customer Private AS",
			MarkdownDescription: "Customer Private AS",
		},
		"id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "ID of the Pop Configuration",
			MarkdownDescription: "ID of the Pop Configuration",
		},
		"interface_id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Required:            true,
			Description:         "ID of the interface",
			MarkdownDescription: "ID of the interface",
		},
		"ovh_bgp_area": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Optional:            true,
			Computed:            true,
			Description:         "OVH Private AS",
			MarkdownDescription: "OVH Private AS",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Status of the pop configuration",
			MarkdownDescription: "Status of the pop configuration",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"active",
					"init",
					"toDelete",
				),
			},
		},
		"subnet": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Subnet should be a /30, first IP for OVH, second IP for customer",
			MarkdownDescription: "Subnet should be a /30, first IP for OVH, second IP for customer",
		},
		"type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Type of the pop configuration",
			MarkdownDescription: "Type of the pop configuration",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"l2",
					"l3",
				),
			},
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OvhcloudConnectPopConfigModel struct {
	CustomerBgpArea ovhtypes.TfInt64Value  `tfsdk:"customer_bgp_area" json:"customerBgpArea"`
	Id              ovhtypes.TfInt64Value  `tfsdk:"id" json:"id"`
	InterfaceId     ovhtypes.TfInt64Value  `tfsdk:"interface_id" json:"interfaceId"`
	OvhBgpArea      ovhtypes.TfInt64Value  `tfsdk:"ovh_bgp_area" json:"ovhBgpArea"`
	ServiceName     ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	Status          ovhtypes.TfStringValue `tfsdk:"status" json:"status"`
	Subnet          ovhtypes.TfStringValue `tfsdk:"subnet" json:"subnet"`
	Type            ovhtypes.TfStringValue `tfsdk:"type" json:"type"`
}

func (v *OvhcloudConnectPopConfigModel) MergeWith(other *OvhcloudConnectPopConfigModel) {

	if (v.CustomerBgpArea.IsUnknown() || v.CustomerBgpArea.IsNull()) && !other.CustomerBgpArea.IsUnknown() {
		v.CustomerBgpArea = other.CustomerBgpArea
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.InterfaceId.IsUnknown() || v.InterfaceId.IsNull()) && !other.InterfaceId.IsUnknown() {
		v.InterfaceId = other.InterfaceId
	}

	if (v.OvhBgpArea.IsUnknown() || v.OvhBgpArea.IsNull()) && !other.OvhBgpArea.IsUnknown() {
		v.OvhBgpArea = other.OvhBgpArea
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.Subnet.IsUnknown() || v.Subnet.IsNull()) && !other.Subnet.IsUnknown() {
		v.Subnet = other.Subnet
	}

	if (v.Type.IsUnknown() || v.Type.IsNull()) && !other.Type.IsUnknown() {
		v.Type = other.Type
	}

}

func (v OvhcloudConnectPopConfigModel) ToCreate() *OvhcloudConnectPopConfigModel {
	res := &OvhcloudConnectPopConfigModel{}

	if !v.CustomerBgpArea.IsUnknown() {
		res.CustomerBgpArea = v.CustomerBgpArea
	}

	if !v.InterfaceId.IsUnknown() {
		res.InterfaceId = v.InterfaceId
	}

	if !v.OvhBgpArea.IsUnknown() {
		res.OvhBgpArea = v.OvhBgpArea
	}

	if !v.Subnet.IsUnknown() {
		res.Subnet = v.Subnet
	}

	if !v.Type.IsUnknown() {
		res.Type = v.Type
	}

	return res
}

func (v OvhcloudConnectPopConfigModel) ToUpdate() *OvhcloudConnectPopConfigModel {
	res := &OvhcloudConnectPopConfigModel{}

	if !v.CustomerBgpArea.IsUnknown() {
		res.CustomerBgpArea = v.CustomerBgpArea
	}

	if !v.InterfaceId.IsUnknown() {
		res.InterfaceId = v.InterfaceId
	}

	if !v.OvhBgpArea.IsUnknown() {
		res.OvhBgpArea = v.OvhBgpArea
	}

	if !v.Subnet.IsUnknown() {
		res.Subnet = v.Subnet
	}

	if !v.Type.IsUnknown() {
		res.Type = v.Type
	}

	return res
}

func (v *OvhcloudConnectPopConfigModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.CustomerBgpArea.IsNull() && !v.CustomerBgpArea.IsUnknown() {
		toMarshal["customerBgpArea"] = v.CustomerBgpArea
	}
	if !v.InterfaceId.IsNull() && !v.InterfaceId.IsUnknown() {
		toMarshal["interfaceId"] = v.InterfaceId
	}
	if !v.OvhBgpArea.IsNull() && !v.OvhBgpArea.IsUnknown() {
		toMarshal["ovhBgpArea"] = v.OvhBgpArea
	}
	if !v.Subnet.IsNull() && !v.Subnet.IsUnknown() {
		toMarshal["subnet"] = v.Subnet
	}
	if !v.Type.IsNull() && !v.Type.IsUnknown() {
		toMarshal["type"] = v.Type
	}

	return json.Marshal(toMarshal)
}
